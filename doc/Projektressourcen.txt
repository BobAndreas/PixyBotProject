3.2	Projektressourcen (Illigens)
3.2.1	ArduinoMega2560
Zur Umsetzung des Projektes wurde uns ein Microcontroller der Plattform Arduino zur Verfügung gestellt, nämlich der ArduinoMega2560, im Folgenden nur ArduinoMega. Basierend auf dem ATmega2560 mit 256 KB Flash-Speicher, 8 KB SRAM und 4 KB EEPROM besitzt der Controller genügend Speicher, um auch komplexere Anwendungen zu speichern und auszuführen. Der Prozessor läuft auf einer Taktrate von 16MHz, besitzt somit genug Leistung für die notwendigen Berechnungen um sowohl den Pixy, als auch die Motoren zu steuern.
Der ArduinoMega besitzt 54 digitale Input- und Output-, sowie 16 analoge Inputpins, um Signale zu Empfangen, beziehungsweise Steuersignale auszugeben. Außerdem bietet sich eine serielle Schnittstelle, über die mit anderen Controllern oder Rechnern kommuniziert werden kann.  Für unser Projekt benutzten wir nur eine kleinere Anzahl an Inputs und Outputs, da keine externe Peripherie, außer den Motoren und dem Pixy angeschlossen werden musste.
Die Motoren steuert der ArduinoMega über ein Shield, welches später genauer erklärt wird. An dieser Stelle ist nur zu sagen, dass es für den ArduinoMega verschiedenste Shields gibt, über die unterschiedlicher Hardwarekomponenten angeschlossen werden können. Typische Hardware sind zum Beispiel Motoren, wie in unserem Projekt, oder auch Displays um verschiedenste Werte anzeigen zu können. Die Inputs und Outputs des Arduino besitzen eine elektrische Verbindung mit Steckbuchsen, in welche man Leitungen stecken kann, bzw. die Pins der Shields.
Für unser Projekt war vor allem auch der ISCP-Header interessant, da die Leitung für die Kommunikation zwischen Pixy und Arduino hier angeschlossen ist und so eine Kommunikation über SPI ermöglicht. Der Vorteil dieser Schnittstelle ist, dass der Pixy auf dem Roboter montiert bleiben kann und nicht an anderer Stelle programmiert werden muss, dies erleichtert die Handhabung bei der Programmierung und beim Testen.
Der ArduinoMega hat eine Betriebsspannung von etwa 5V und benötigt eine externe Spannungsversorgung.  Dabei gibt es drei unterschiedliche Möglichkeiten den ArduinoMega zu versorgen. Der ArduinoMega kann über Steckbuchsen mit Masse und 5 Volt versorgt werden, oder man kann ein externes Netzteil anschließen. Die dritte Möglichkeit ist, den ArduinoMega über die USB Schnittstelle zu versorgen, die außerdem zum Programmieren benutzt wird. Für das Projekt erfolgt die Versorgung durch die erste Möglichkeit, also über die Inputpins. Die nötige Leistung liefert das Shield, welches durch externe  Batterien versorgt wird.
Die einzelnen Pins des ArduinoMega können nur bis zu 40mA an Strom abgeben, während die gesamte Leistungsaufnahme eines Arduinos 500mA nicht überschreitet. Daher wäre es unmöglich die für das Projekt notwendigen Motoren, ohne das Motor shield anzusteuern.
Insgesamt eignete sich der ArduinoMega also sehr gut für das Projekt, auch wenn wir einen Großteil seiner Anschlüsse nicht benutzten. Vor allem die verhältnissmäßig hohe Leistung, im Gegensatz zu einigen anderen Modellen, brachte uns einige Vorteile beim Umsetzen des Projektes.

Die Arduino IDE
Für die Programmierung des ArduinoMega bietet die Plattform Arduino eine eigene Entwicklungsumgebung an, nämlich die Arduino DIE.
Arduino liefert einige eigene Bibliotheken, die von einer Vielzahl an Bibliotheken von externen Entwicklern ergänzt werden. Vor allem die Hersteller von Arduino Shields liefern in der Regel Bibliotheken um ihre Shields verhältnissmäßig einfach bedienen zu können. Durch den Open Source Charakter von Arduino, gibt es wie schon erwähnt auch eine Bibliothek sowohl für den Pixy, als auch für die Motoren.
Die Arduino IDE ist natürlich nicht nur für den ArduinoMega ausgelegt, sondern für sämtliche Mikrocontroller der Arduino Plattform. Zur Programmierung muss man den richtigen Mikrocontoller auswählen und auch den richtigen Port, über den man diesen programmieren möchte.
Während des Projektes war vor allen Dingen der serielle Monitor der Arduino IDE nützlich. Über diesen Monitor findet das Debugging des Codes statt. Wenn man eine serielle Kommunikation mit dem Rechner aufbaut, werden Print Statements auf dem Monitor ausgegeben und dadurch festgestellt welche Codeabschnitte der ArduinoMega grade ausführt, oder welche Werte bestimmte Variablen angenommen haben.
Programmiert wird des ArduinoMega mit C++ und bietet deshalb auch features wie Klassen an, die es in reinem ANSI C nicht gibt. Obwohl der Controller mit einer Hochsprache programmiert wird, bietet die Platform Arduino einen einfachen Einstieg für Anfänger an. Nicht nur ist Arduino ein OpenSource Projekt und deshalb finden sich an vielen Stellen Hilfestellungen, die Arduino DIE bietet auch sogenannte Sketches, also kleine Beispielprogramme, an denen einige Funktionalitäten erleutert werden.
Beim Start der Arduino DIE findet man bereits den Standartaufbau eines Arduino Programms vor sich.  Zwei Methoden bilden den Kern eines Programms, die Methode „setup“, im Folgenden Setupmethode und die Methode „loop“, im Folgenden Loopmethode. 
Die Setupmethode wird beim Starten einer Arduino einmal ausgeführt. Hier werden zum Beispiel verschiedene Initialiserungen vorgenommen und typischerweise verschiedenen Variablen Startwerte zugewiesen. Außerdem wird hier die Baudrate für die serielle Kommunikation festgelegt. Dabei ist es wichtig, dass die selbe Baudrate spezifiziert wird, wie die Baudrate des Kommunikationspartners, bei Kommunikation mit einem Rechner benötigt man eine Baudrate von 9600.
Wie der Name schon vorgibt, wird der Code in der Loopmethode immer wieder ausgeführt, solange der Arduino an eine Spannungsquelle angeschlossen ist. Hier können andere Methoden aufgerufen werden und die meisten Funktionalitäten werden auf diese Weise ausgeführt.  

3.2.2	Shield
Da die verwendeten Motoren mit höheren Strömen als 40mA betrieben werden, braucht es eine externe Schaltung um die Motoren zu betreiben. Der ArduinoMega bietet dabei nur die nötigen Steuersignale, aber nicht die eigentlichen Ströme zur Bewegung der Motoren. 
Der Entwurf einer externen Schaltung bleibt, durch die Nutzung eines Motor Shields, bei diesem Projekt aus. Verbaut ist auf dem Roboter das Seeed Studio 4A Motor Shield der Firma Seeed Studio. Das Shield basiert auf einer Freescale MC33932 Dual H-Brücke-Leistungs-IC und kann deshalb Spitzenströme von bis zu 5A pro Motor steuern, außerdem ist das Shield für eine Dauerbelastung von 2A ausgelegt. An das Shield können bis zu 2 Motoren angeschlossen werden.
Der Mikrocontroller, in diesem Fall des ArduinoMega, wird mit eine Spannung von 5 V versorgt und kann bis zu 100mA Maximalstrom an den Controller abgeben. Daher ist das Shield für das Projekt geeignet, es stellt sowohl die erforderliche Betriebsspannung zur Verfügung und die 100mA reichen bei Weitem aus, um den Arduino zu versorgen.
Das Shield bietet eine zuverlässige Begrenzung, sowohl für den Strom der Motoren, als auch für die Versorgung des ArduinoMega. Des Weiteren existiert ein interner Kurzschlussschutz um Schäden am der Hardware zu vermeiden. Für die Versorgung des Shields ist ein weites Spektrum ein Eingangsspannungen, 6V bis 28V, zulässig, da es einen intergrierten DC/DC Wandler besitzt, der die Eingangsspannung auf die benötigte Betriebsspannung regelt.
Die Versorgung des Shields und daher auch der restlichen Komponenten übernehmen 6 Akkus, die über Leitungen mit den Anschlussklemmen auf dem Shield verbunden sind. Jeder der Akkus hat eine Nennspannung von 1,2V, also in Summe 7,2V und liegen somit im breiten Eingangsspektrum des Motor Shields.  Die etwas höhere Spannung sorgt außerdem für eine zuverlässige Betriebsspannung, da Versorgungsspannungen unter 7V zu Instabilitäten führen können.

3.2.3	Motoren


3.2.4	Pixy
Der Pixy2, der im Projekt für die visuelle Erfassung von Objekten genutzt wird, wurde durch eine Kooperation von Charmed Labs und Cargenie Mellon Universität entwickelt, um einfache visuelle Erfassung für verschiedene Mikrocontrollerplattformen zu ermöglichen. Gängige Kommunikationspartner für den Pixy2, sind zum Beispiel der Raspberry Pie, oder ein beliebiges Modell des Arduino, in diesem Projekt der ArduinoMega. Dabei stellt Pixy2 die sechste Version der CMUcam dar, dessen erste Version bereits 1999 am Robotic Institut der Carnegie Mellon Universität entwickelt wurde. Interessant ist hierbei, dass die Plattfrom Pixy durch ein Crowdfunding im Jahr 2013 finanziert wurde und befindet sich nun in den vorhandenen Version Pixy2.
Das Pixy2 System besteht aus einer Kamera und einem Prozessor und bietet Möglichkeiten Gegenstände anhand ihrer Farbe optisch zu erfassen und diese Objekte dann in Abläufen zu verarbeiten. Die Farben werden in sogenannten Signaturen gespeichert, von denen der Pixy2 bis zu Zum Erfassen von verschiedenen Objekten gibt es zwei Möglichkeiten, zum Einen kann über einen am Board montierten Drucktaster eine Farbe angelernt werden, zum Anderen exisitiert eine Software, die man sich kostenlos von der offiziellen Seite herunterladen kann. Zusätzlich vertreibt der Hersteller das System auf einer Servo-gesteuerten Montierung als „Tilt-Pan-Kit“, mit dessen Hilfe die Kamera der Bewegung von Objekten folgen kann. Dieses „Tilt-Pan-Kit“ wird auch in diesem Projekt genutzt, um eine zuverlässige Bewegung des Pixy zu gewährleisten arbeitet das Kit mit zwei Servomotoren, die jeweils die horizontale und die vertikale Bewegung ausführen.
Die Spezifikationen des Pixy2 lassen sich in der Folgenden Tabelle ablesen:
Prozessor	NXP LPC4330, 204 MHz, Dual Core
Bildsensor	Aptina MT9M114, 1296×976 Auflösung mit integriertem Image Flow Prozessor
Sichtfeld der Linse	60Grad horizontal, 40 Grad vertikal
Integrierte Lichtquelle	ca. 20Lumen
Leistungsaufnahme	140mA typisch
USB-Eingang (5V) oder ungeregelter Eingang (6V bis 10V DC)
RAM	264KBytes
Flash	2MBytes
Verfügbare Schnittstellen	UART seriell, SPI, I2C, USB, Digital, Analog
Abmessungen	38.1 x 41.9 x 15.2mm
Gewicht	10g

Wie bereits erwähnt, ist der Pixy2 über die SPI Schnittstelle mit dem Arduino verbunden, wobei auch die Spannungsversorgung über diese Schnittstelle passiert. Die notwendige Spannung liefert hierbei wieder das Motor Shield, der Pixy2 wird also auch über die Akkus versorgt. Für die Programmierung des Pixy2, also das Einlesen von Signaturen, kann eine Verbindung mit einem Rechner aufgebaut werden. Diese Verbindung ist notwendig um die Software PixiMon v2 nutzen zu können und wird über die USB Schnittstelle initiiert. Nützlich ist dabei die USB auf Mikro-USB Verbindungsleitung, die vom Hersteller mitgeliefert wird.
Durch den Leistungsstarken Prozessor, kann das System sogar Frameraten von 60 FPS liefern, wobei der Prozessor durch den verhältnismäßig großen Speicher unterstützt wird.

PixyMon
